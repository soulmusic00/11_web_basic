# 문제 1) 한번에 주문 수량이 10개 이상인 상품 정보 모두와 주문수량 조회하기.
SELECT
		P.*,
        O.ORDER_GOODS_QTY
FROM
		T_ORDER O
	 INNER JOIN T_PRODUCT P
             ON O.PRODUCT_CODE = P.PRODUCT_CODE
			AND O.ORDER_GOODS_QTY >= 10;



# 문제 2) 2020년 동안 판매된 매출총액 조회하기.(가격 * 개수 + 배송비)

SELECT
		SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS ANNUAL_2020_SALES
FROM 
		T_ORDER O
	 INNER JOIN T_PRODUCT P
             ON O.PRODUCT_CODE = P.PRODUCT_CODE
			AND O.ORDER_DATE BETWEEN '2020-01-01' AND '2020-12-31';



# 문제 3) '상품별'로 2020년 동안 판매된 수량(내림차순)순으로 정렬하여  상품코드 , 상품이름 , 상품판매량 조회하기.

SELECT
		P.PRODUCT_CODE			AS PRODUCT_CODE,
		P.PRODUCT_NAME 			AS PRODUCT_NAME,
        SUM(O.ORDER_GOODS_QTY)  AS TOTAL_ORDER_COUNT
FROM 
		T_ORDER O
	 INNER JOIN T_PRODUCT P
             ON O.PRODUCT_CODE = P.PRODUCT_CODE
			AND O.ORDER_DATE BETWEEN '2020-01-01' AND '2020-12-31'
GROUP BY
		P.PRODUCT_CODE
ORDER BY
		TOTAL_ORDER_COUNT DESC;



# 문제 4) '지역별'로 판매량이 많은 순서대로 정렬하여 지역명과 판매량 조회하기.

SELECT
		M.REGIDENCE			   AS REGIDENCE,
        SUM(O.ORDER_GOODS_QTY) AS TOTAL_ORDER_COUNT
FROM 
		T_ORDER O
	 INNER JOIN T_MEMBER M
			 ON O.MEMBER_ID = M.MEMBER_ID
GROUP BY
		M.REGIDENCE
ORDER BY
		TOTAL_ORDER_COUNT DESC;



# 문제 5) 배송이 완료된 상품의 회원테이블의 모든 정보와 배송상태 조회하기.

SELECT
		M.*,
        O.DELIVERY_STATE	AS DELIVERY_STATE
FROM
		T_ORDER O
	 INNER JOIN T_MEMBER M
             ON M.MEMBER_ID = O.MEMBER_ID
			AND O.DELIVERY_STATE = '배송완료';



# 문제 6) '배송이 완료되지 않은 상품'별로  상품코드 , 상품 이름 , 배송이 완료되지 않은 주문 건수 조회하기.

SELECT
		P.PRODUCT_CODE	AS PRODUCT_CODE,
		P.PRODUCT_NAME	AS PRODUCT_NAME,
        COUNT(*)		AS COUNT
FROM
		T_ORDER O
	 INNER JOIN T_PRODUCT P
             ON O.PRODUCT_CODE = P.PRODUCT_CODE
			AND O.DELIVERY_STATE <> '배송완료'
GROUP BY
		PRODUCT_NAME;



# 문제 7) '상품별'로 상품코드,상품이름,판매금액 총합을 판매급액이 많은 순으로 조회하기. 

SELECT
		P.PRODUCT_CODE														AS PRODUCT_CODE,
		P.PRODUCT_NAME														AS PRODUCT_NAME,
        SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS TOTAL_SALES
FROM
		T_ORDER O
	 INNER JOIN T_PRODUCT P
             ON P.PRODUCT_CODE = O.PRODUCT_CODE
GROUP BY
		P.PRODUCT_CODE
ORDER BY
		TOTAL_SALES DESC;



# 문제 8) '메르켈' 회원의 주문 상품 이름과 배송상태를 조회하기.

SELECT 
		P.PRODUCT_NAME    AS PRODUCT_NAME,
		O.DELIVERY_STATE  AS DELIVERY_STATE
FROM
		T_ORDER O
 INNER JOIN T_MEMBER T
		 ON T.MEMBER_ID = O.MEMBER_ID
		AND T.MEMBER_NAME = '메르켈'
 INNER JOIN T_PRODUCT P
         ON P.PRODUCT_CODE = O.PRODUCT_CODE;



# 문제 9) '메르켈' 회원의 주문금액 총합을 조회하기.

SELECT
        SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS TOTAL_PRICE
FROM
		T_ORDER O
	 INNER JOIN T_MEMBER M
		     ON M.MEMBER_ID = O.MEMBER_ID
			AND M.MEMBER_NAME = '메르켈'
	 INNER JOIN T_PRODUCT P
             ON P.PRODUCT_CODE = O.PRODUCT_CODE;



# 문제 10 ) '사용자'별로 사용자 아이디 , 사용자 이름 , 주문금액 총합을 조회 하기.

SELECT
		M.MEMBER_ID															AS MEMBER_ID,
        M.MEMBER_NAME														AS MEMBER_NAME,
        SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS TOTAL_PRICE
FROM
		T_ORDER O
	 INNER JOIN T_MEMBER M
		     ON M.MEMBER_ID = O.MEMBER_ID
	 INNER JOIN T_PRODUCT P
             ON P.PRODUCT_CODE = O.PRODUCT_CODE
GROUP BY
		M.MEMBER_ID;



# 문제 11) '사용자'별로 주문금액 총합이 700만원 이상인 회원의 이름을 오름차순으로 정렬하여 조회하기.

SELECT
		M.MEMBER_NAME														AS MEMBER_NAME,
        SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS TOTAL
FROM
		T_ORDER O
	 INNER JOIN T_MEMBER M
		     ON M.MEMBER_ID = O.MEMBER_ID
	 INNER JOIN T_PRODUCT P
             ON P.PRODUCT_CODE = O.PRODUCT_CODE
GROUP BY
		M.MEMBER_ID
HAVING 
		TOTAL >= 7000000
ORDER BY
		M.MEMBER_NAME;



# 문제 12) '사용자'별로 주문금액 총합이 가장 많은 사람 3명의 이름과 총 주문 금액을 순서대로 조회하기.

SELECT
		M.MEMBER_NAME														AS MEMBER_NAME,
        SUM(P.PRODUCT_PRICE * O.ORDER_GOODS_QTY + P.PRODUCT_DELIVERY_PRICE) AS TOTAL_PRICE
FROM
		T_ORDER O
	 INNER JOIN T_MEMBER M
		     ON M.MEMBER_ID = O.MEMBER_ID
	 INNER JOIN T_PRODUCT P
             ON P.PRODUCT_CODE = O.PRODUCT_CODE
GROUP BY
		M.MEMBER_NAME
ORDER BY 
		 TOTAL_PRICE DESC
LIMIT
		3;